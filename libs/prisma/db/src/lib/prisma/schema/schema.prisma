generator client {
    provider        = "prisma-client-js"
    binaryTargets   = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "darwin", "darwin-arm64"]
    previewFeatures = ["relationJoins", "prismaSchemaFolder"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Notification {
    id               Int                @id @default(autoincrement())
    message          String
    createdAt        DateTime           @default(now()) @map("createdAt")
    type             String?
    isArchived       Boolean            @default(false) @map("is_archived")
    additionalData   Json?              @map("additional_data")
    link             String?
    userNotification UserNotification[]

    @@map(name: "notifications")
}

model UserNotification {
    receiverId     Int          @map("receiver_id")
    notificationId Int          @map("notification_id")
    user           AuthUser     @relation("receiver", fields: [receiverId], references: [id])
    notification   Notification @relation(fields: [notificationId], references: [id])
    sender         AuthUser?    @relation("sender", fields: [senderId], references: [id])
    senderId       Int?         @map("sender_id")
    isRead         Boolean      @default(false) @map("is_read")

    @@id([receiverId, notificationId])
    @@map(name: "users_notifications")
}

model Channel {
    id          Int           @id @default(autoincrement())
    name        String        @unique
    description String?
    createdAt   DateTime      @default(now()) @map("created_at")
    UserChannel UserChannel[]

    @@map(name: "channels")
}

model UserChannel {
    userId    Int      @map("user_id")
    channelId Int      @map("channel_id")
    user      AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)
    channel   Channel  @relation(fields: [channelId], references: [id])

    @@id([userId, channelId])
    @@map(name: "users_channels")
}
