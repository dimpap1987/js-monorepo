version: '3.8'

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_prod
    ports:
      - 9090:9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
    volumes:
      - ./config:/etc/prometheus
      - prometheus-data:/prometheus
    # user: "root"
    networks:
      - super-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana_prod
    ports:
      - '8000:3000'
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    env_file:
      - ./grafana/config.monitoring
    networks:
      - super-network
    restart: unless-stopped

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter_prod
    command: '--path.rootfs=/host'
    # ports:
    #   - '9100:9100'
    pid: host
    restart: unless-stopped
    volumes:
      - /:/host:ro,rslave
    networks:
      - super-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor_prod
    command:
      - '-port=8098'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    restart: unless-stopped
    networks:
      - super-network

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter_prod
    env_file:
      - .env
    # ports:
    #   - '9187:9187'
    environment:
      DATA_SOURCE_NAME: ${DATABASE_URL}
    command:
      - '--collector.stat_statements' # Enable stat_statements collector
      - '--collector.stat_user_tables' # Enable stat_user_tables collector (default enabled)
      - '--collector.stat_wal_receiver' # Enable stat_wal_receiver collector
      - '--collector.statio_user_indexes' # Enable statio_user_indexes collector
    networks:
      - super-network

  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: ['--config=/etc/otel-collector-config.yaml']
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - '4317:4317' # OTLP gRPC
      - '4318:4318' # OTLP HTTP
    networks:
      - super-network
    depends_on:
      - tempo

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: ['-config.file=/etc/tempo.yaml']
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
      - tempo-data:/var/tempo
    ports:
      - '3200:3200' # Tempo HTTP (query, etc)
    networks:
      - super-network

  # Loki - Log Aggregator
  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    command: -config.file=/etc/loki/config.yaml
    ports:
      - '3100:3100' # Loki HTTP endpoint (for queries)
    volumes:
      - ./config/loki.yaml:/etc/loki/config.yaml
      - loki-data:/loki
    networks:
      - super-network

  # Promtail - Log Collector
  promtail:
    image: grafana/promtail:2.9.3
    container_name: promtail
    command: -config.file=/etc/promtail/config.yaml
    volumes:
      - ./config/promtail.yaml:/etc/promtail/config.yaml
      - /var/log:/var/log # Logs from host
      - /var/lib/docker/containers:/var/lib/docker/containers:ro # Docker logs
      - /etc/machine-id:/etc/machine-id # Required for Docker metadata
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - loki
    networks:
      - super-network

networks:
  super-network:
    external: true

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  tempo-data:
    driver: local
  loki-data:
    driver: local
