version: '3.8'

services:
  nginx:
    image: nginx:latest
    ports:
      - '80:80'
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - my-api
    depends_on:
      - my-api
      - next-app

  my-api:
    image: dimpap/my-api:1.0.100
    container_name: my-api_prod
    ports:
      - '3333:3333'
      - '4444:4444'
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - logs-data:/usr/src/app/logs
    networks:
      - my-api
    command: >
      sh -c "npx prisma migrate deploy --schema=./prisma/schema && node main.js"
    depends_on:
      - redis
      - postgres

  next-app:
    image: dimpap/next-app:1.0.100
    container_name: next-app_prod
    ports:
      - '3000:3000'
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - my-api

  postgres:
    image: postgres:16.1-alpine3.19
    container_name: postgres_container_prod
    environment:
      POSTGRES_DB: ${DATABASE_DB}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    restart: unless-stopped
    networks:
      - my-api
    volumes:
      - ${POSTGRES_VOLUME_PATH}:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis_prod
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - my-api

  redis-commander:
    container_name: redis-commander_prod
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - '8081:8081'
    networks:
      - my-api
    depends_on:
      - redis

volumes:
  dumpnew:
  redis-data:
  logs-data:

networks:
  my-api:
