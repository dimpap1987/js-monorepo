version: '3.8'

services:
  nginx:
    image: nginx:latest
    container_name: nginx_prod
    ports:
      - '80:80'
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/']
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - my-api

  my-api:
    image: dimpap/my-api:1.0.100
    container_name: my-api_prod
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - logs-data:/usr/src/app/logs
    networks:
      - my-api
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3333/api/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "npx prisma migrate deploy --schema=./prisma/schema && node main.js"
    depends_on:
      - redis
      - postgres

  next-app:
    image: dimpap/next-app:1.0.100
    container_name: next-app_prod
    env_file:
      - .env
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - my-api

  postgres:
    image: postgres:16.1-alpine3.19
    container_name: postgres_container_prod
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DATABASE_DB}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - my-api
    volumes:
      - ${POSTGRES_VOLUME_PATH}:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis_prod
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping | grep PONG']
      interval: 1s
      timeout: 3s
      retries: 5
    volumes:
      - redis-data:/data
    networks:
      - my-api

  redis-commander:
    container_name: redis-commander_prod
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - '8081:8081'
    networks:
      - my-api
    depends_on:
      - redis

volumes:
  dumpnew:
  redis-data:
  logs-data:

networks:
  my-api:
