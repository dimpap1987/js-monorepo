name: My-app - Next-app

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        name: Checkout Branch
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      - name: Fetch branch
        run: git fetch origin ${{ github.base_ref }}

      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
 
      - name: Use the package manager cache if available
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: nrwl/nx-set-shas@v3
      - run: npm install

      - name: Lint check
        run: npm run lint:all

      - name: Run Affected Tests
        run: |
          npx nx affected:test --base=origin/main --head=${{ github.sha }} --watch=false

      - name: Generate Prisma Client
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}
          DIRECT_URL: ${{ secrets.DIRECT_URL_PROD }}
        run: |
          npx prisma generate --schema=libs/prisma/db/src/lib/prisma/schema

      - name: Build API
        run: npm run build:my-api

      - name: Build Next.js
        env:
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY_PROD}}
          NEXT_PUBLIC_AUTH_URL: ${{ secrets.NEXT_PUBLIC_AUTH_URL_PROD}}
          NEXT_PUBLIC_WEBSOCKET_PRESENCE_URL: ${{ secrets.NEXT_PUBLIC_WEBSOCKET_PRESENCE_URL_PROD}}
        run: npm run build:next

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist
          retention-days: 1

  build-and-push-docker:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      - uses: actions/checkout@v4
        name: Checkout Branch
        with:
          fetch-depth: 0

      - name: Download Build Artifacts
        uses: actions/download-artifact@v
        with:
          name: build-artifacts
          path: dist
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Extract version from package.json
        id: extract_version
        run: |
          echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Build My-api Docker image and Push to Docker Hub
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}
          DIRECT_URL: ${{ secrets.DIRECT_URL_PROD }}
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
          -t dimpap/my-api:${{ steps.extract_version.outputs.version }} \
          -t dimpap/my-api:latest \
          --build-arg DATABASE_URL=$DATABASE_URL \
          --build-arg DIRECT_URL=$DIRECT_URL \
          -f apps/my-api/Dockerfile . --push
    
      - name: Build Docker Next-app image and Push to Docker Hub
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
          -t dimpap/next-app:${{ steps.extract_version.outputs.version }} \
          -t dimpap/next-app:latest \
          -f apps/next-app/Dockerfile . --push
