name: integration - CI/CD

on:
  push:
    branches:
      - integration
  pull_request:
    branches:
      - integration

jobs:
  main:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        name: Checkout [Integration Branch]]
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      - name: Fetch integration branch
        run: git fetch origin ${{ github.base_ref }}

      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
 
      - name: Use the package manager cache if available
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: nrwl/nx-set-shas@v3
      - run: npm install

      - name: Lint check
        run: npx nx affected:lint --base=origin/integration --head=${{ github.sha }}

      - name: Run Tests
        run: npx nx affected:test --base=origin/integration --head=${{ github.sha }}
        
      - name: Generate Prisma Client
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.TEST_DIRECT_URL }}
        run: |
          npx prisma generate --schema=libs/prisma/db/src/lib/prisma/schema.prisma

      - name: Build Next.js
        env:
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
        run:  npm run build:next

      - name: Extract version from package.json
        id: extract_version
        run: |
          echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image using Buildx and Push to Docker Hub
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
          -t dimpap/next-app:${{ steps.extract_version.outputs.version }} \
          -t dimpap/next-app:latest \
          -f apps/next-app/Dockerfile . --push
